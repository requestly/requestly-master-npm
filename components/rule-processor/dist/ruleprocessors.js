!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.requestlyRuleProcessors=r():e.requestlyRuleProcessors=r()}(global,(function(){return(()=>{var e={976:(e,r,t)=>{if(void 0===E)var E=!0;const a={};let s;s=E?t(531):window.RQ.configs,a.APP_MODES={DESKTOP:"DESKTOP",EXTENSION:"EXTENSION",WORDPRESS:"WORDPRESS",CLOUDFLARE:"CLOUDFLARE"},a.COMPANY_INFO={SUPPORT_EMAIL:"contact@requestly.io"},a.VERSION=3,a.TRACK_ERRORS=!0,a.ONBOARDING_DAYS_TO_EXPIRE=7,a.ONBOARDING_TASKS=5,a.FILE_PICKER_URL="/library/filepicker",a.VERSIONS={REPLACE_RULE:2},a.ENV=s.env,a.PUBLIC_NAMESPACE="__REQUESTLY__",a.RULES_PAGE_URL=s.WEB_URL+"/rules/",a.RULES_PAGE_URL_PATTERN=a.RULES_PAGE_URL+"*",a.PRICING_PAGE_URL=s.WEB_URL+"/pricing/",a.GOODBYE_PAGE_URL=s.WEB_URL+"/goodbye/",a.DELAY_API_URL=s.WEB_URL+"/delay/",a.MOCK_URL=s.WEB_URL+"/mock/",a.DESKTOP_APP_URL=s.WEB_URL+"/desktop/intercept-traffic",a.CONSOLE_LOGGER_ENABLED="console-logger-enabled",a.BLACK_LIST_DOMAINS=["requestly.in","requestly.io","rq.in","rq.io","__rq"],a.STRING_CONSTANTS={SLASH:"/"},a.LIMITS={NUMBER_SHARED_LISTS:10,NUMBER_EXECUTION_LOGS:25},a.DEFAULTS={APP_INIT_TIMEOUT:5e3},a.OBJECT_TYPES={GROUP:"group",RULE:"rule"},a.RULE_TYPES={REDIRECT:"Redirect",CANCEL:"Cancel",REPLACE:"Replace",HEADERS:"Headers",USERAGENT:"UserAgent",SCRIPT:"Script",QUERYPARAM:"QueryParam",RESPONSE:"Response",REQUEST:"Request",DELAY:"Delay"},a.DELAY_REQUEST_CONSTANTS={DELAY_PARAM_NAME:"delay",DELAY_PARAM_VALUE:"true",MIN_DELAY_VALUE:1,MAX_DELAY_VALUE_NON_XHR:1e4,MAX_DELAY_VALUE_XHR:5e3,DELAY_TYPE:{CLIENT_SIDE:"clientSideDelay",SERVER_SIDE:"serverSideDelay"},REQUEST_TYPE:{XHR:"xmlhttprequest"},METHOD_TYPE:{GET:"GET"}},a.OBJECT_FORMAT_KEYS={CREATION_DATE:"creationDate",NAME:"name",ID:"id",RULE_TYPE:"ruleType",STATUS:"status",OBJECT_TYPE:"objectType",GROUP_ID:"groupId",IS_FAVOURITE:"isFavourite"},a.HEADER_NAMES={USER_AGENT:"User-Agent"},a.GROUP_STATUS={ACTIVE:"Active",INACTIVE:"Inactive"},a.RULE_STATUS={ACTIVE:"Active",INACTIVE:"Inactive"},a.SUBSCRIPTION_STATUS={ACTIVE:"active",CANCELLED:"cancelled"},a.RULE_KEYS={URL:"Url",HOST:"host",PATH:"path",HEADER:"Header",OVERWRITE:"Overwrite",IGNORE:"Ignore",PARAM:"param",VALUE:"value"},a.PATH_FROM_PAIR={RULE_KEYS:"source.key",RULE_OPERATORS:"source.operator",SCRIPT_LIBRARIES:"libraries",SOURCE_PAGE_URL_OPERATOR:"source.filters.pageUrl.operator",SOURCE_PAGE_URL_VALUE:"source.filters.pageUrl.value",SOURCE_RESOURCE_TYPE:"source.filters.resourceType",SOURCE_REQUEST_METHOD:"source.filters.requestMethod",SOURCE_REQUEST_PAYLOAD_KEY:"source.filters.requestPayload.key",SOURCE_REQUEST_PAYLOAD_VALUE:"source.filters.requestPayload.value"},a.HEADER_SUGGESTIONS={Request:[{label:"authorization",value:"authorization"},{label:"cache-control",value:"cache-control"},{label:"cookie",value:"cookie"},{label:"connection",value:"connection"},{label:"origin",value:"origin"},{label:"user-agent",value:"user-agent"}],Response:[{label:"age",value:"age"},{label:"access-control-allow-origin",value:"access-control-allow-origin"},{label:"access-control-allow-credentials",value:"access-control-allow-credentials"},{label:"expires",value:"expires"},{label:"server",value:"server"},{label:"x-frame-options",value:"x-frame-options"}]},a.URL_COMPONENTS={PROTOCOL:"Protocol",URL:"Url",HOST:"host",PATH:"path",QUERY:"query",HASH:"hash"},a.RULE_OPERATORS={EQUALS:"Equals",CONTAINS:"Contains",MATCHES:"Matches",WILDCARD_MATCHES:"Wildcard_Matches"},a.RULE_SOURCE_FILTER_TYPES={PAGE_URL:"pageUrl",RESOURCE_TYPE:"resourceType",REQUEST_METHOD:"requestMethod",REQUEST_DATA:"requestPayload"},a.MODIFICATION_TYPES={ADD:"Add",REMOVE:"Remove",REMOVE_ALL:"Remove All",MODIFY:"Modify",REPLACE:"Replace"},a.NEED_HELP_QUERY_TYPES={FEEDBACK:"Feedback",BUG:"Bug",QUESTION:"Question",FEATURE_REQUEST:"FeatureRequest"},a.CLIENT_MESSAGES={GET_SCRIPT_RULES:"getScriptRules",DO_SETUP_RESPONSE_RULE_HANDLER:"doSetupResponseRuleHandler",GET_USER_AGENT_RULE_PAIRS:"getUserAgentRulePairs",OVERRIDE_RESPONSE:"overrideResponse",NOTIFY_RULES_APPLIED:"notifyRulesApplied",PRINT_CONSOLE_LOGS:"printConsoleLogs",GET_SESSION_RECORDING_CONFIG:"getSessionRecordingConfig",IS_RECORDING_SESSION:"isRecordingSession",GET_TAB_SESSION:"getTabSession"},a.EXTENSION_MESSAGES={FOCUS_TAB:"focusTab",GET_FULL_LOGS:"getFullLogs",CLEAR_LOGS_FOR_TAB:"clearLogsForTab",CLEAR_LOGS_FOR_DOMAIN:"clearLogsForDomain",GET_FAVOURITE_RULES:"getFavouriteRules",GET_PINNED_GROUPS:"getPinnedGroups",GET_ALL_RULES:"getAllRules",GET_FLAGS:"getFlags",GET_TAB_SESSION:"getTabSession"},a.HEADERS_TARGET={REQUEST:"Request",RESPONSE:"Response"},a.REQUEST_TYPES={MAIN_FRAME:"mainFrame",PAGE_REQUEST:"pageRequest"},a.SCRIPT_TYPES={URL:"url",CODE:"code"},a.SCRIPT_CODE_TYPES={JS:"js",CSS:"css"},a.SCRIPT_LOAD_TIME={BEFORE_PAGE_LOAD:"beforePageLoad",AFTER_PAGE_LOAD:"afterPageLoad"},a.SCRIPT_LIBRARIES={JQUERY:{name:"jQuery",src:"https://code.jquery.com/jquery-2.2.4.js"},UNDERSCORE:{name:"Underscore",src:"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"}},a.REQUEST_BODY_TYPES={STATIC:"static",CODE:"code"},a.RESPONSE_BODY_TYPES={STATIC:"static",CODE:"code",LOCAL_FILE:"local_file"},a.RESPONSE_CODES={NOT_FOUND:404},a.STORAGE_KEYS={REQUESTLY_SETTINGS:"rq_settings",USER_INFO:"user_info",LATEST_NOTIFICATION_READ_BY_USER:"latestNotificationReadId",SESSION_RECORDING_CONFIG:"sessionRecordingConfig"},a.MESSAGES={DELETE_ITEMS_NO_SELECTION_WARNING:"Please select one or more rules to delete.",DELETE_ITEMS:"Are you sure you want to delete the selected items?",DELETE_GROUP_WITH_RULES_WARNING:"There are some rules contained in this group. Please delete or ungroup them before deleting the group.",DELETE_GROUP:"Are you sure you want to delete the group?",UNGROUP_ITEMS_NO_SELECTION_WARNING:"Please select one or more rules to ungroup.",UNGROUP_ITEMS:"Are you sure you want to ungroup the selected items?",SIGN_IN_TO_VIEW_SHARED_LISTS:"Please login to view your Shared Lists.",SIGN_IN_TO_CREATE_SHARED_LISTS:"Please login to share the selected rules",SIGN_IN_TO_SUBMIT_QUERY:"Please login to contact our support team.",ERROR_AUTHENTICATION:"Received some error in authentication. Please try again later!!",SHARED_LISTS_LIMIT_REACHED:"You can not create more than"+a.LIMITS.NUMBER_SHARED_LISTS+"shared lists",ERROR_TAB_FOCUS:"The tab cannot be focused, as it might have been closed.",DEACTIVATE_REQUESTLY_MENU_OPTION:"Deactivate Requestly"},a.RESOURCES={EXTENSION_ICON:"/resources/images/48x48.png",EXTENSION_ICON_GREYSCALE:"/resources/images/48x48_greyscale.png",EXTENSION_ICON_GREEN:"/resources/images/48x48_green.png"},a.GA_EVENTS={CATEGORIES:{RULES:"rules",RULE:"rule",GROUP:"group",USER:"user",SHARED_LIST:"shared list",TRASH:"trash",RULE_LOGS:"rule logs",EXTENSION:"extension",IN_APP_NOTIFICATION:"InAppNotification",NEED_HELP_FEATURE:"need help feature",PRICING:"pricing",LICENSE:"license",LIBRARY:"library",UNLOCK:"unlock",REMOTE_RULES:"remoteRules",SPONSOR_SIDERAIL:"sponsor_siderail",LOGIN:"login",SIGNUP:"signup",REFERRAL:"referral",PAGE_VISITS:"page visits",REQUEST_UPGRADE:"request upgrade",MARKETPLACE:"marketplace",CHECKOUT:"checkout page",TEAMS:"teams page",ONBOARDING:"onboarding page",RULE_PAIRS:"rule pairs",DESKTOP_APP:"desktop app"},ACTIONS:{MODIFIED:"modified",CREATED:"created",DELETED:"deleted",ACTIVATED:"activated",DEACTIVATED:"deactivated",IMPORTED:"imported",EXPORTED:"exported",LIMIT_REACHED:"limit reached",AUTHENTICATED:"authenticated",VIEWED:"viewed",CLICKED:"clicked",COPIED:"duplicated",MARKED_FAVOURITE:"marked favourite",UNMARKED_FAVOURITE:"unmarked favourite",WORKFLOW_STARTED:"workflow started",ALREADY_LOGIN:"already login",LOGIN_REQUESTED:"login requested",LOGIN_DONE:"login done",LOGIN_REJECTED:"login rejected",FORM_SUBMITTED:"form submitted",FORM_REJECTED:"form rejected",INVALID_SUBMIT:"invalid submit",GROUPED:"grouped",UNGROUPED:"ungrouped",SHARED:"shared",ERROR:"error occured",TASK_COMPLETED:"task completed",BACKUP_CREATED:"backup created",BACKUP_USED:"backup used",CARD_ERROR:"card error",CARD_ACCEPTED:"card accepted",CARD_ENTERED:"card num and cv entered",CURRENCY_CHANGE:"currency_changed",DURATION_CHANGE:"duration_changed",APPLIED_SUCCESSFULLY:"applied_successfully",APPLIED_UNSUCCESSFULLY:"applied_unsuccessfully",REVOKED:"revoked",BOUGHT:"bought",UPDATED:"updated",REQUEST_ADMIN:"enterprise_plan_requested",UNINSTALLED:"uninstalled",UNINSTALL_RESPONSE:"uninstall_response",ROUTE_VIEWED:"route_viewed",EMAIL_LOGIN_PERFORMED:"email_login_performed",EMAIL_SIGNUP_PERFORMED:"email_signup_performed",GMAIL_LOGIN_PERFORMED:"gmail_login_performed",GMAIL_SIGNUP_PERFORMED:"gmail_signup_performed",MICROSOFT_LOGIN_PERFORMED:"microsoft_login_performed",APPLE_LOGIN_PERFORMED:"apple_login_performed",REFERRAL_APPLIED:"referral_applied",REFERRAL_FAILED:"referral_failed",EMAIL_VERIFICATION_RESEND:"resend_email_verification",EMAIL_VERIFICATION_SUCCESSFUL:"email_verification_successful",EMAIL_VERIFICATION_FAILED:"email_verification_failed",TRAFFIC_TABLE_VIEWED:"traffic_table_viewed",TRAFFIC_TABLE_MODIFIED:"traffic_table_modified",APP_LAUNCHED:"app_launched",APP_CLOSED:"app_closed",APP_NOT_LAUNCHED:"app_not_launched",PROXY_SERVER:"proxy_server_started",BG_PROCESS:"bg_process_started",MANUAL_SETUP_MAC:"manual_setup_mac",DARK_MODE_ENABLED:"dark_mode_enabled",DARK_MODE_DISABLED:"dark_mode_disabled",UPGRADE_REQUIRED_FOR_DARK_MODE:"upgrade_required_for_dark_mode",SIMULATE_RULE:"simulate_rule",EXECUTION_LOGS:"execution_logs"},ATTR:{PAYMENT_MODE:"payment_mode",PLANNAME:"planname",PLAN_DURATION:"plan_duration",PLAN_ID:"plan_id",PLAN_START_DATE:"plan_startDate",PLAN_END_DATE:"plan_endDate",COUPON:"coupon",COUPON_VALUE:"coupon_value",LICENSE:"licensekey",COMPANY:"company",PROFILE:"profile",REMOTE_RULES_ENDPOINT:"remoteRulesEndpoint",REMOTE_RULES_FREQUENCY:"remoteRulesFrequency",NUM_RULES:"NUM_RULES",NUM_ACTIVE_RULES:"NUM_ACTIVE_RULES",NUM_GROUPS:"NUM_GROUPS",NUM_ACTIVE_GROUPS:"NUM_ACTIVE_GROUPS",NUM_SHARED_LISTS:"NUM_SHARED_LISTS",ONBOARDING_V1_DONE:"ONBOARDING_V1_DONE",SIGNUP_DATE:"SIGNUP_DATE",EXTENSION_INSTALL_DATE:"install_date",DESKTOP_INSTALL_DATE:"desktop_install_date",APP_MODE:"APP_MODE",EMAIL_TYPE:"EMAIL_TYPE",EMAIL_DOMAIN:"EMAIL_DOMAIN",IS_PREMIUM:"IS_PREMIUM",TRIAL_MODE_ENABLED:"trial_mode_enabled"},VALUES:{PAYPAL:"paypal"},GA_CUSTOM_DIMENSIONS:{USER_ID:"dimension1"},GA_CUSTOM_METRICS:{num_rules:"metric1"}},a.USER={AUTHORIZED:"authorized-user",UNAUTHORIZED:"unauthorized-user"},a.FIREBASE_NODES={USERS:"users",PUBLIC:"public",SHARED_LISTS:"sharedLists",FEEDBACK:"feedback",FILES:"files"},a.DATASTORE={ACTIONS:{CHECK_USER_AUTH:"check:userAuthenticated",AUTHENTICATE:"authenticate",FETCH_USER_DETAILS:"fetchUserDetails",GETVALUE:"getValue",SETVALUE:"setValue"}},a.MESSAGE_HANDLER={ACTIONS:{SUBMIT_EVENT:"submitEvent",SUBMIT_ATTR:"submitAttr"},MESSAGE_TYPES:{EVENT:"event",ATTRIBUTE:"attribute"},SINKS:{CUSTOMERLY:"customerly"}},a.REQUEST_STATE={LOADING:"LOADING",COMPLETE:"COMPLETE"},a.getSharedListURL=function(e,r){const t=r.replace(new RegExp(" +|/+","g"),"-").replace(/-+/g,"-");return a.RULES_PAGE_URL+"#sharedList/"+e+"-"+t},a.getSharedListTimestamp=function(e){return e.split("-")[0]},a.fireAjax=function(e,r){return new Promise(((t,E)=>{const a=new XMLHttpRequest;a.open("GET",e,r),a.onreadystatechange=function(){4===this.readyState&&(this.status>=200&&this.status<400?t(JSON.parse(this.responseText)):E())},a.send()}))},E?e.exports=a:Object.assign(window.RQ,a)},531:e=>{if(void 0===r)var r=!0;const t={browser:"chrome",storageType:"sync",contextMenuContexts:["browser_action"],collectExtUsageStats:!0,env:"dummy",WEB_URL:"https://app.requestly.io",firebaseConfig:{apiKey:"xx",authDomain:"xx",databaseURL:"xx",projectId:"xx",storageBucket:"xx",messagingSenderId:"xx"},logLevel:"debug",stripeConfig:{publishableKey:"xx"},version:"22.6.9"};r?e.exports=t:window&&(window.RQ=window.RQ||{},window.RQ.configs=t)}},r={};function t(E){var a=r[E];if(void 0!==a)return a.exports;var s=r[E]={exports:{}};return e[E](s,s.exports,t),s.exports}t.d=(e,r)=>{for(var E in r)t.o(r,E)&&!t.o(e,E)&&Object.defineProperty(e,E,{enumerable:!0,get:r[E]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var E={};return(()=>{"use strict";t.r(E),t.d(E,{RuleMatcher:()=>S,getInstance:()=>p});const e=t(976),r="^/(.+)/(|i|g|ig|gi)$";function a(e){var t,E=function(e){return-1!==e.search(new RegExp(r))}(e);return E?(t=e.match(new RegExp(r)),new RegExp(t[1],t[2])):null}function s(r,t){const E=new URL(r);switch(t){case e.URL_COMPONENTS.URL:return r;case e.URL_COMPONENTS.PROTOCOL:return E.protocol;case e.URL_COMPONENTS.HOST:return E.host;case e.URL_COMPONENTS.PATH:return E.pathname;case e.URL_COMPONENTS.QUERY:return E.search;case e.URL_COMPONENTS.HASH:return E.hash}console.error("Invalid source key",r,t)}function o(e){var r={};return e&&"?"!==e?("?"===e[0]&&(e=e.substr(1)),e.split("&").forEach((function(e){var t=e.split("=")[0],E=e.split("=")[1];r[t]=r[t]||[],r[t].push(E)})),r):r}function l(e){var r=[];for(var t in e)(e[t]||[]).forEach((function(e){void 0===e?r.push(t):r.push(t+"="+e)}));return r.join("&")}function n(e){return e.split("#")[0].split("?")[0]}var i=t(976);const{RULE_TYPES:R}=i,u={};u.GENERATE_RANDOM_NUMBER={applicableRuleTypes:[R.HEADERS],name:"rq_rand",description:"Generate Random Number",usage:"rq_rand(4) (Max 8 digits allowed)",argument:"[0-9]+",getRandomNumber:function(e){return Math.ceil(Math.random()*Math.pow(10,e))},argumentEvaluator:function([e],r={}){const t=e[0];var E=Math.min(t,8),a=u.GENERATE_RANDOM_NUMBER.getRandomNumber(E);for(a=a.toString();a.length<E;)a+="0";return a}},u.GET_REQUEST_ORIGIN={applicableRuleTypes:[R.HEADERS],name:"rq_request_origin",description:"The origin request header",usage:"rq_request_origin()",argument:"",argumentEvaluator:function([e],r={}){return r&&r.requestOrigin?r.requestOrigin:"*"}};const _=t(976);class c{static populateMatchesInString(e,r){return r.forEach((function(r,t){0!==t&&(r=r||"",e=e.replace(new RegExp("[$]"+t,"g"),r))})),e}static checkRegexMatch(e,r,t){var E,s=a(e);return s&&-1!==r.search(s)?(E=s.exec(r)||[],c.populateMatchesInString(t,E)):null}static checkWildCardMatch(e,r,t){var E,a,s,o,l=[];for(r="|"+r+"|",E=(e="|"+e+"|").split("*"),a=0;a<E.length;a++){if(s=E[a],-1===(o=r.indexOf(s)))return null;0===o?l.push(""):l.push(r.substr(0,o)),r=r.slice(o+s.length)}return c.populateMatchesInString(t,l)}static matchUrlWithRuleSource(e,r,t){for(var E=e.operator,a=s(r,e.key),o=e.value,l=_.BLACK_LIST_DOMAINS||[],n=0;n<l.length;n++)if(-1!==r.indexOf(l[n]))return null;return c.matchUrlCriteria(a,E,o,t)}static matchUrlCriteria(e,r,t,E){const a=E||"";switch(r){case _.RULE_OPERATORS.EQUALS:if(t===e)return a;break;case _.RULE_OPERATORS.CONTAINS:if(-1!==e.indexOf(t))return a;break;case _.RULE_OPERATORS.MATCHES:return c.checkRegexMatch(t,e,a);case _.RULE_OPERATORS.WILDCARD_MATCHES:return c.checkWildCardMatch(t,e,a)}return null}static matchUrlWithRulePair(e,r,t){let E=void 0!==e.destination?e.destination:null,a=null;return c.matchRequestWithRuleSourceFilters(e.source.filters,t)&&(a=c.matchUrlWithRuleSource(e.source,r,E)),a}static matchUrlWithRulePairs(e,r,t){let E,a=r,s=null;for(E=0;E<e.length;E++)s=this.matchUrlWithRulePair(e[E],a,t),null!==s&&(a=s);return a!==r?a:null}static matchRequestWithRuleSourceFilters(e,r){if(!e||!r)return!0;for(let t in e){const E=e[t]||[];switch(t){case _.RULE_SOURCE_FILTER_TYPES.PAGE_URL:if(!E.every((e=>c.matchPageUrlFilter(e,r))))return!1;break;case _.RULE_SOURCE_FILTER_TYPES.REQUEST_METHOD:if(!E.some((e=>r.method===e)))return!1;break;case _.RULE_SOURCE_FILTER_TYPES.RESOURCE_TYPE:if(!E.some((e=>r.type===e)))return!1;break;case _.RULE_SOURCE_FILTER_TYPES.REQUEST_DATA:if(!this.isRequestPayloadFilterApplicable(r.requestData,E))return!1}}return!0}static matchPageUrlFilter(e,r){const t=r.pageUrl;return null!==c.matchUrlCriteria(t,e.operator,e.value)}static matchValueForPredefinedFunctions(e,r={}){if(!e)return e;for(const E in u){const a=u[E];if("function"!=typeof a.argumentEvaluator)return e;let s;if(a.argument.constructor===Array&&a.argument.length>0){s=a.argument[0];for(var t=1;t<a.argument.length;t++)s+="( *, *"+a.argument[t]+")?"}else s=a.argument;const o=a.pattern||new RegExp(a.name+"\\("+s+"\\)","ig");e=e.replace(o,(function(e){var t=e.match(new RegExp(a.name+"\\((.*)\\)","i")),E=[];return null!=t&&t.length>1?(t[1].split(",").forEach((function(e){E.push(e.trim())})),a.argumentEvaluator(E,r)):e}))}return e}static getHeaderModification(e,r){var t;return e===_.RULE_TYPES.USERAGENT?{source:r.source,target:_.HEADERS_TARGET.REQUEST,type:_.MODIFICATION_TYPES.REPLACE,header:_.HEADER_NAMES.USER_AGENT,value:r.userAgent}:((t=r).source=t.source||{},t)}static addHeader(e,r){e.push({name:r.name,value:r.value})}static removeHeader(e,r){for(var t=e.length-1;t>=0;t--){var E=e[t];E.name&&E.name.toLowerCase()===r.toLowerCase()&&e.splice(t,1)}}static modifyHeaderIfExists(e,r){for(var t=e.length-1;t>=0;t--){var E=e[t];if(E.name&&E.name.toLowerCase()===r.name.toLowerCase()){E.value=r.value;break}}}static replaceHeader(e,r){this.removeHeader(e,r.name),this.addHeader(e,r)}static isRequestPayloadFilterApplicable(e,r){if(!r)return!0;if("object"==typeof r&&0===Object.keys(r).length)return!0;if(!e||"object"!=typeof e)return!1;if(0===Object.keys(e).length)return!1;const t=(r=r||{})?.key;return!!t&&((e,r)=>{if(!r)return;const t=r.split(".");try{let r=0;for(r=0;r<t.length-1;r++)e=e[t[r]];return e[t[t.length-1]]}catch(e){console.log(e)}})(e,t)==r?.value}}const S=c,T={BLOCK:"block",REDIRECT:"redirect",ADD_DELAY:"add_delay"},A=t(976),O=t(976);class L{static process({rule:e,requestURL:r,details:t}){const E=r;let a=e.pairs,s=null,o=E;for(let e=0;e<a.length;e++)s=a[e],S.matchRequestWithRuleSourceFilters(s.source.filters,t)&&null!==S.matchUrlWithRuleSource(s.source,E)&&(o=this.applyQueryParamModifications(s.modifications,o));return o!==E?{action:"redirect",url:o}:null}static applyQueryParamModifications(e,r){let t=r;return e.forEach((function(e){t=L.applyQueryParamModification(e,t)})),t}static applyQueryParamModification(r,t){let E=t,a=n(t),i=s(t,O.URL_COMPONENTS.HASH),R=s(t,O.URL_COMPONENTS.QUERY),u=o(R),_=r.param,c=r.value;switch(r.type){case O.MODIFICATION_TYPES.ADD:E=function(r,t,E,a){let i=r,R=n(r),u=s(r,e.URL_COMPONENTS.HASH),_=s(r,e.URL_COMPONENTS.QUERY),c=o(_);return c[t]=a?[]:c[t]||[],c[t].push(E),_=l(c),i=_?R+"?"+_:R,i+=u,i}(E,_,c,"Overwrite"===r.actionWhenParamExists),"Ignore"===r.actionWhenParamExists&&(E=t);break;case O.MODIFICATION_TYPES.REMOVE:_ in u&&(delete u[_],R=l(u),E=R?a+"?"+R:a,E+=i);break;case O.MODIFICATION_TYPES.REMOVE_ALL:E=a+i}return E}}const U=L,I=t(976),d=t(976),N=t(976),P=t(976);function p(e){return class{static getRuleProcessorInstance(e){switch(e.toLowerCase()){case P.RULE_TYPES.REDIRECT.toLowerCase():return class{static process({rule:e,requestURL:r,details:t}){let E=S.matchUrlWithRulePairs(e.pairs,r,t);return E&&E!==r?{action:T.REDIRECT,url:E}:null}};case P.RULE_TYPES.REPLACE.toLowerCase():return class{static process({rule:e,requestURL:r,details:t}){let E,s=e.pairs,o=null,l=null,n=r;for(let e=0;e<s.length;e++)o=s[e],o.from=o.from||"",o.source&&!S.matchRequestWithRuleSourceFilters(o.source.filters,t)||o.source&&o.source.value&&null===S.matchUrlWithRuleSource(o.source,n)||(l=a(o.from),E=null!==l,l=l||o.from,(E&&n.match(l)||-1!==n.indexOf(l))&&(n=n.replace(l,o.to)));return n!==r?{action:"redirect",url:n}:null}};case P.RULE_TYPES.HEADERS.toLowerCase():return class{static process({rule:e,requestURL:r,details:t,originalHeaders:E,typeOfHeaders:a,payload:s={}}){let o=!1,l=e.pairs||[],n=[...E];for(let e=0;e<l.length;e++){let E=l[e],R=E;if(R.target&&R.header&&null!==S.matchUrlWithRulePair(E,r,t)&&(o=!0,!a||R.target===a)){var i=S.matchValueForPredefinedFunctions(R.value,s);switch(R.type){case A.MODIFICATION_TYPES.ADD:S.addHeader(n,{name:R.header,value:i});break;case A.MODIFICATION_TYPES.REMOVE:S.removeHeader(n,R.header);break;case A.MODIFICATION_TYPES.MODIFY:S.modifyHeaderIfExists(n,{name:R.header,value:i});break;case A.MODIFICATION_TYPES.REPLACE:S.replaceHeader(n,{name:R.header,value:i})}}}return o?{action:"modify_headers",newHeaders:n,originalHeaders:E}:null}};case P.RULE_TYPES.CANCEL.toLowerCase():return class{static process({rule:e,requestURL:r,details:t}){const E=r;let a=S.matchUrlWithRulePairs(e.pairs,E,t);return"string"==typeof a&&0===a.length?{action:T.BLOCK}:null}};case P.RULE_TYPES.QUERYPARAM.toLowerCase():return U;case P.RULE_TYPES.SCRIPT.toLowerCase():return class{static process({rule:e,requestURL:r}){var t=e.pairs[0];if(null===S.matchUrlWithRulePair(t,r))return null;var E=[],a=[];return t.libraries&&t.libraries.forEach((function(e){E.includes(e)||E.push(e)})),{action:"insert",data:{cssScripts:(a=a.concat(t.scripts||[])).filter((function(e){return e.codeType===I.SCRIPT_CODE_TYPES.CSS})),jsScripts:a.filter((function(e){return!e.codeType||e.codeType===I.SCRIPT_CODE_TYPES.JS})),libraries:E}}}};case P.RULE_TYPES.USERAGENT.toLowerCase():return class{static process({rule:e,requestURL:r,originalRequestHeaders:t=[],details:E={}}){console.log({rule:e,requestURL:r,originalRequestHeaders:t,details:E});let a=!1,s=[...t];const o=e.ruleType,l=e.pairs||[];let n=null;E&&E.pageDomain&&(n=E.pageDomain);for(let e=0;e<l.length;e++){let t=l[e],E=S.getHeaderModification(o,t);(!E.source.value||null!==S.matchUrlWithRuleSource(E.source,r)||o===d.RULE_TYPES.USERAGENT&&E.source.requestType===d.REQUEST_TYPES.MAIN_FRAME&&n&&null!==S.matchUrlWithRuleSource(E.source,n))&&(a=!0,S.replaceHeader(s,{name:E.header,value:E.value}))}return a?{action:"modify_user_agent",newRequestHeaders:s}:null}};case P.RULE_TYPES.DELAY.toLowerCase():return class{static process({rule:e,requestURL:r,details:t}){let E=e.pairs,a=null,s=r,o=null,l=null;for(let e=0;e<E.length;e++)if(a=E[e],S.matchRequestWithRuleSourceFilters(a.source.filters,t)&&null!==S.matchUrlWithRuleSource(a.source,r)&&(!a.source||!a.source.value||null!==S.matchUrlWithRuleSource(a.source,s)))return o=a.delay,l=a.delayType||N.DELAY_REQUEST_CONSTANTS.DELAY_TYPE.CLIENT_SIDE,{action:T.ADD_DELAY,delay:o,delayType:l};return null}};case P.RULE_TYPES.RESPONSE.toLowerCase():return class{static process({rule:e,requestURL:r,details:t}){var E=e.pairs[0];return null===S.matchUrlWithRulePair(E,r,t)?null:E.response&&E.response.type&&E.response.value?{action:"modify_response",response:E.response.value,responseType:E.response.type,statusCode:E.response.statusCode}:null}};case P.RULE_TYPES.REQUEST.toLowerCase():return class{static process({rule:e,requestURL:r,details:t}){var E=e.pairs[0];return null===S.matchUrlWithRulePair(E,r,t)?null:E.request&&E.request.type&&E.request.value?{action:"modify_request",request:E.request.value,requestType:E.request.type}:null}};default:return null}}}.getRuleProcessorInstance(e)}})(),E})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,